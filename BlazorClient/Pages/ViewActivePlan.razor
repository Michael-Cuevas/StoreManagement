@page "/editmarkdownplansales/{PlanId}"
@using StoreManagement.Shared.Models
@inject HttpClient Http
@inject NavigationManager Navigation

<h3>Edit Markdown Plan Sales Data</h3>

@if (markdownPlan == null)
{
    <p><em>Loading...</em></p>
}

else
{
    @if (!string.IsNullOrEmpty(validationMessage))
    {
        <div class="alert alert-danger mt-2">
            @validationMessage
        </div>
    }

    @if (!markdownPlan.SaleEnded)
    {
        <button @onclick="ToggleAddSalesDataForm" class="btn btn-primary mb-3">Add New Sales Data</button>
    }


    @if (showAddSalesDataForm)
    {
        <form @onsubmit="AddSalesData">
            <label for="salesDate">Sales Date:</label>
            <input id="salesDate" @bind="newSalesDatum.SalesDate" type="date" class="form-control mb-2" readonly/>

            <label for="totalSold">Total Sold:</label>
            <input id="totalSold" @bind="newSalesDatum.TotalSold" type="number" class="form-control mb-2" />

            <button type="submit" class="btn btn-success">Submit</button>
        </form>
    }

    <h5>Sales Data</h5>
    <div class="mb-3">
        <strong>Initial Inventory:</strong> @markdownPlan.InitialInventory
    </div>
    <div class="mb-3">
        <strong>Product ID:</strong> @markdownPlan.ProductId
    </div>
    <div class="mb-3">
        <strong>Product Name:</strong> @markdownPlan.Product?.Name
    </div>
    <table class="table table-striped mt-5">
        <thead>
            <tr>
                <th>Sales Date</th>
                <th>Total Sold</th>
                <th>Margin</th>
                <th>Profit</th>
                <th>Remaining</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var data in salesDataList)
            {
                <tr>
                    <td>@data.SalesDate</td>
                    <td>@data.TotalSold</td>
                    <td>@data.Margin</td>
                    <td>@data.TotalProfit</td>
                    <td>@data.RemainingInventory</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    [Parameter]
    public string PlanId { get; set; }

    private MarkdownPlan markdownPlan;
    private string validationMessage;
    private List<MarkdownPlan> markdownPlans = new List<MarkdownPlan>();
    private List<Inventory> inventory = new List<Inventory>();
    private List<Product> products = new List<Product>();
    private List<SalesDatum> salesDataList = new List<SalesDatum>();
    private bool showAddSalesDataForm = false;
    private SalesDatum newSalesDatum = new SalesDatum();

    protected override async Task OnInitializedAsync()
    {
        markdownPlan = await Http.GetFromJsonAsync<MarkdownPlan>($"/markdownplan/{PlanId}");
        salesDataList = await Http.GetFromJsonAsync<List<SalesDatum>>($"/salesdata/forplan/{PlanId}");
        newSalesDatum.SalesDate = markdownPlan.CurrentSaleDate.Value;
        inventory = await Http.GetFromJsonAsync<List<Inventory>>("/inventory");
    }

    private async Task UpdatePlan()
    {
        var response = await Http.PutAsJsonAsync($"/markdownplan/{PlanId}", markdownPlan);
        if (response.IsSuccessStatusCode)
        {
            Navigation.NavigateTo("/markdownplans");
        }
    }

    private void ToggleAddSalesDataForm()
    {
        showAddSalesDataForm = !showAddSalesDataForm;
    }


    private async Task AddSalesData()
    {
        int salesDatumId = -1;
        int currentQuant = inventory.FirstOrDefault(i => i.ProductId == markdownPlan.ProductId).Quantity;
        int newQuant = currentQuant - newSalesDatum.TotalSold;

        if(newQuant < 0)
        {
            validationMessage = "New quantity will be less than 0";
            return;
        }

        newSalesDatum.MarkdownPlanId = int.Parse(PlanId);  // Link it to the current markdown plan
        var response = await Http.PostAsJsonAsync("/salesdata", newSalesDatum);
        if (response.IsSuccessStatusCode)
        {
            var createdData = await response.Content.ReadFromJsonAsync<SalesDatum>();
            salesDataList.Add(createdData);
            salesDatumId = createdData.Id;
            showAddSalesDataForm = false;  // Close the form
        }
        if (markdownPlan.CurrentSaleDate.HasValue)
        {
            markdownPlan.CurrentSaleDate = markdownPlan.CurrentSaleDate.Value.AddDays(1);
        }
        else
        {
            markdownPlan.CurrentSaleDate = DateOnly.FromDateTime(DateTime.Today);
        }
        if (markdownPlan.CurrentSaleDate > markdownPlan.EndDate)
            markdownPlan.SaleEnded = true;

        response = await Http.PutAsJsonAsync($"/markdownplan/{markdownPlan.Id}", markdownPlan);
        if (response.IsSuccessStatusCode)
        {
            markdownPlan = await Http.GetFromJsonAsync<MarkdownPlan>($"/markdownplan/{markdownPlan.Id.ToString()}");
        }
        newSalesDatum = new SalesDatum
            {
                SalesDate = markdownPlan.CurrentSaleDate.Value
            };

        if(salesDatumId > 0)
        {
            response = await Http.PutAsJsonAsync($"/updatepricesandcounts/{salesDatumId}", newSalesDatum);
            if (response.IsSuccessStatusCode)
            {
                markdownPlan = await Http.GetFromJsonAsync<MarkdownPlan>($"/markdownplan/{markdownPlan.Id.ToString()}");
                inventory = await Http.GetFromJsonAsync<List<Inventory>>("/inventory");
                salesDataList = await Http.GetFromJsonAsync<List<SalesDatum>>($"/salesdata/forplan/{PlanId}");
            }

        }
        validationMessage = string.Empty; // Reset validation message
        StateHasChanged();

    }
}
