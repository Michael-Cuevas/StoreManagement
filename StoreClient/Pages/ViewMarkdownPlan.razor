@page "/editmarkdownplan/{PlanId}"
@using StoreManagement.Shared.Models
@inject HttpClient Http
@inject NavigationManager Navigation

<h3>Edit Markdown Plan</h3>

@if (markdownPlan == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="mb-5">
        <h5>Edit Markdown Plan</h5>

        @if (!string.IsNullOrEmpty(validationMessage))
        {
            <div class="alert alert-danger mt-2">
                @validationMessage
            </div>
        }

        <label for="editStartDate">Start Date:</label>
        <input id="editStartDate" @bind="markdownPlan.StartDate" placeholder="Start Date" type="date" class="form-control mb-2" />

        <label for="editEndDate">End Date:</label>
        <input id="editEndDate" @bind="markdownPlan.EndDate" placeholder="End Date" type="date" class="form-control mb-2" />

        <label for="editProduct">Product:</label>
        <select id="editProduct" @bind="markdownPlan.ProductId" class="form-control mb-2">
            <option value="0">-- Select Product --</option>
            @foreach (var product in products) 
            {
                <option value="@product.Id">@product.Name</option>
            }
        </select>

        <label for="editInitialReduction">Initial Reduction:</label>
        <input id="editInitialReduction" @bind="markdownPlan.InitialReduction" placeholder="Initial Reduction" type="number" step="0.01" class="form-control mb-2" />

        <label for="editIntermidiateReduction">Intermidiate Reduction:</label>
        <input id="editIntermidiateReduction" @bind="markdownPlan.IntermidiateReduction" placeholder="Intermidiate Reduction" type="number" step="0.01" class="form-control mb-2" />

        <label for="editFinalReduction">Final Reduction:</label>
        <input id="editFinalReduction" @bind="markdownPlan.FinalReduction" placeholder="Final Reduction" type="number" step="0.01" class="form-control mb-2" />

        <button @onclick="UpdatePlan" class="btn btn-success">Update</button>
        <button @onclick="ActivatePlan" class="btn btn-success">Activate</button>
    </div>
}

@code {
    [Parameter]
    public string PlanId { get; set; }

    private MarkdownPlan markdownPlan;
    private string validationMessage;
    private List<MarkdownPlan> markdownPlans = new List<MarkdownPlan>();
    private List<Product> products = new List<Product>();
    private List<SalesDatum> salesDataList = new List<SalesDatum>();
    private bool showAddSalesDataForm = false;
    private SalesDatum newSalesDatum = new SalesDatum();

    protected override async Task OnInitializedAsync()
    {
        markdownPlan = await Http.GetFromJsonAsync<MarkdownPlan>($"/markdownplan/{PlanId}");
        markdownPlans = await Http.GetFromJsonAsync<List<MarkdownPlan>>("/markdownplan");
        products = await Http.GetFromJsonAsync<List<Product>>("/products");


    }

    private async Task UpdatePlan()
    {
        // Validation and Update Logic Here
        var response = await Http.PutAsJsonAsync($"/markdownplan/{PlanId}", markdownPlan);
        if (response.IsSuccessStatusCode)
        {
            Navigation.NavigateTo("/markdownplans");
        }
    }

    private void ToggleAddSalesDataForm()
    {
        showAddSalesDataForm = !showAddSalesDataForm;
    }


    private async Task ActivatePlan()
    {
        //var response = await Http.PutAsJsonAsync($"/markdownplan/{PlanId}", markdownPlan);
        var response = await Http.PutAsJsonAsync($"/activateplan/{PlanId}", markdownPlan);
        if (response.IsSuccessStatusCode)
        {
            Navigation.NavigateTo($"/editmarkdownplansales/{PlanId}");
        }
    }
}
